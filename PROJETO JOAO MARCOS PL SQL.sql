-- +----------------------------------------------------------------------+
--  João Marcos Torres Lins Marques
--  Joaomarcos1@outlook.com
--
--  SIMULAÇÃO EMPRESA DE SEGUROS AUTOMOTIVOS
-- +----------------------------------------------------------------------+

-- +----TRUNCATE AND DROP---------+
DROP TABLE JMM_APOLICE;
DROP TABLE JMM_VEICULOS;
DROP TABLE JMM_MODELO;
DROP TABLE JMM_MONTADORA;
DROP TABLE JMM_CLIENTES;
DROP TABLE JMM_LOGS;

DROP SEQUENCE JMM_SEQ_CLIENTES;
DROP SEQUENCE JMM_SEQ_VEICULOS;
DROP SEQUENCE JMM_SEQ_MONTADORA;
DROP SEQUENCE JMM_SEQ_MODELO;
DROP SEQUENCE JMM_SEQ_APOLICE;
DROP SEQUENCE JMM_SEQ_LOGS;
-- +----CRIAÇÃO DAS TABELAS---------+
CREATE TABLE JMM_CLIENTES
(IDCLI NUMBER(11) NOT NULL,
 DATACADASTRO DATE,
 NOME VARCHAR2(20) NOT NULL,
 CPF VARCHAR(17) NOT NULL,
 DATANASCIMENTO DATE,
 CONSTRAINT IDCLI_PK PRIMARY KEY(IDCLI)
);

CREATE TABLE JMM_VEICULOS
(IDVEIC NUMBER(11) NOT NULL,
 PLACA VARCHAR(10),
 ANOFABRICACAO NUMBER(5) NOT NULL,
 IDCLI NUMBER(11),
 IDMOD NUMBER(11),
 CONSTRAINT IDVEIC_PK PRIMARY KEY(IDVEIC)
);

--
CREATE TABLE JMM_MONTADORA
(IDMONT NUMBER(11) NOT NULL,
 NOME VARCHAR2(20) NOT NULL,
 CONSTRAINT IDMONT_PK PRIMARY KEY(IDMONT)
);

CREATE TABLE JMM_MODELO
(IDMOD NUMBER(11) NOT NULL,
 NOME VARCHAR2(20) NOT NULL,
 IDMONT NUMBER(11),
 CONSTRAINT IDMODELO_PK PRIMARY KEY(IDMOD)
);

CREATE TABLE JMM_APOLICE
(IDAPOLICE NUMBER(11) NOT NULL,
 VALORAPOLICE NUMBER(11,2),
 DATACADASTRO DATE,
 IDVEIC NUMBER(11),
 CONSTRAINT IDAPOLICE_PK PRIMARY KEY(IDAPOLICE)
);

CREATE TABLE JMM_LOGS
(IDLOG NUMBER(11) NOT NULL,
 VALOR_ANTIGO NUMBER(11,2),
 NOVO_VALOR NUMBER(11,2),
 OBSERVACAO VARCHAR2(50)
);



-- +----CRIAÇÃO DAS CHAVES EXTRANGEIRAS---------+
ALTER TABLE JMM_VEICULOS
ADD CONSTRAINT fk_CliCar FOREIGN KEY(IDCLI) REFERENCES JMM_CLIENTES(IDCLI);

ALTER TABLE JMM_VEICULOS
ADD CONSTRAINT fk_VeicMod FOREIGN KEY(IDMOD) REFERENCES JMM_MODELO(IDMOD);

ALTER TABLE JMM_MODELO
ADD CONSTRAINT fk_MontMod FOREIGN KEY(IDMONT) REFERENCES JMM_MONTADORA(IDMONT);

ALTER TABLE JMM_APOLICE
ADD CONSTRAINT fk_ApoCli FOREIGN KEY(IDVEIC) REFERENCES JMM_VEICULOS(IDVEIC);



-- +----CRIAÇÃO DAS SEQUENCES---------+
CREATE SEQUENCE JMM_SEQ_CLIENTES START WITH 1;
CREATE SEQUENCE JMM_SEQ_VEICULOS START WITH 1;
CREATE SEQUENCE JMM_SEQ_MONTADORA START WITH 1;
CREATE SEQUENCE JMM_SEQ_MODELO START WITH 1;
CREATE SEQUENCE JMM_SEQ_APOLICE START WITH 1;
CREATE SEQUENCE JMM_SEQ_LOGS START WITH 1;


-- +----OBSERVAÇÕES IMPORTANTES---------+
COMMENT ON COLUMN JMM_VEICULOS.IDMOD IS 'FK TABLE MODELO';
COMMENT ON COLUMN JMM_VEICULOS.IDCLI IS 'FK TABLE CLIENTES';
COMMENT ON COLUMN JMM_APOLICE.IDVEIC IS 'FK TABLE VEICULOS';
COMMENT ON table  JMM_LOGS           IS 'Modificações da tabela JMM_APOLICE';

-- +----POPULAÇÃO DAS TABELAS---------+
INSERT INTO JMM_CLIENTES VALUES(JMM_SEQ_CLIENTES.NEXTVAL,SYSDATE,'Joao','123.123.123-12',to_date('12/04/1993','DD/MM/YYYY'));
INSERT INTO JMM_CLIENTES VALUES(JMM_SEQ_CLIENTES.NEXTVAL,SYSDATE,'Ricardo','213.213.213-21',to_date('01/01/1950','DD/MM/YYYY'));
INSERT INTO JMM_CLIENTES VALUES(JMM_SEQ_CLIENTES.NEXTVAL,SYSDATE,'Alberto','321.321.321-32',to_date('05/08/2001','DD/MM/YYYY'));
INSERT INTO JMM_CLIENTES VALUES(JMM_SEQ_CLIENTES.NEXTVAL,SYSDATE,'Junior','332.332.332-33',to_date('28/05/1962','DD/MM/YYYY'));
INSERT INTO JMM_CLIENTES VALUES(JMM_SEQ_CLIENTES.NEXTVAL,SYSDATE,'Alberico','223.223.223-23',to_date('05/08/1984','DD/MM/YYYY'));

INSERT INTO JMM_MONTADORA VALUES(JMM_SEQ_MONTADORA.NEXTVAL,'Chevrolet');
INSERT INTO JMM_MONTADORA VALUES(JMM_SEQ_MONTADORA.NEXTVAL,'Ford');
INSERT INTO JMM_MONTADORA VALUES(JMM_SEQ_MONTADORA.NEXTVAL,'Fiat');
INSERT INTO JMM_MONTADORA VALUES(JMM_SEQ_MONTADORA.NEXTVAL,'Renault');

INSERT INTO JMM_MODELO VALUES(JMM_SEQ_MODELO.NEXTVAL,'Celta',1);
INSERT INTO JMM_MODELO VALUES(JMM_SEQ_MODELO.NEXTVAL,'Uno',3);
INSERT INTO JMM_MODELO VALUES(JMM_SEQ_MODELO.NEXTVAL,'Logan',4);
INSERT INTO JMM_MODELO VALUES(JMM_SEQ_MODELO.NEXTVAL,'Agile',1);

INSERT INTO JMM_VEICULOS VALUES(JMM_SEQ_VEICULOS.NEXTVAL,'KLK-1212',2001,5,2);
INSERT INTO JMM_VEICULOS VALUES(JMM_SEQ_VEICULOS.NEXTVAL,'QAP-0022',2018,5,2);
INSERT INTO JMM_VEICULOS VALUES(JMM_SEQ_VEICULOS.NEXTVAL,'IJH-2032',2020,1,4);
INSERT INTO JMM_VEICULOS VALUES(JMM_SEQ_VEICULOS.NEXTVAL,'PAP-2232',2014,2,3);
INSERT INTO JMM_VEICULOS VALUES(JMM_SEQ_VEICULOS.NEXTVAL,'PUM-2321',2019,3,4);

INSERT INTO JMM_APOLICE VALUES(JMM_SEQ_APOLICE.NEXTVAL,1000,SYSDATE,4);
INSERT INTO JMM_APOLICE VALUES(JMM_SEQ_APOLICE.NEXTVAL,800,SYSDATE,5);
INSERT INTO JMM_APOLICE VALUES(JMM_SEQ_APOLICE.NEXTVAL,1400,SYSDATE,2);
INSERT INTO JMM_APOLICE VALUES(JMM_SEQ_APOLICE.NEXTVAL,450,SYSDATE,1);
INSERT INTO JMM_APOLICE VALUES(JMM_SEQ_APOLICE.NEXTVAL,450,SYSDATE,2);


-- +----PROCEDURE: SOMA DOS CLIENTES ASSOCIADOS AOS MODELOS---------+
CREATE OR REPLACE PROCEDURE total_clientes_modelos AS
CURSOR CRS
IS
SELECT MODELO.NOME AS Modelo ,MONTADORA.NOME AS Montadora,Sum(VEICULOS.IDCLI) AS Total
FROM JMM_VEICULOS VEICULOS
INNER JOIN JMM_MODELO MODELO ON VEICULOS.IDMOD = MODELO.IDMOD
INNER JOIN JMM_MONTADORA MONTADORA ON MODELO.IDMONT = MONTADORA.IDMONT
GROUP BY MODELO.NOME,
         MONTADORA.NOME
ORDER BY MODELO.NOME;
total_clientes NUMBER(5);
montadora      JMM_MONTADORA.NOME%TYPE;
modelo         JMM_MODELO.NOME%TYPE;

BEGIN
  OPEN CRS;
  LOOP
  FETCH CRS INTO modelo,montadora,total_clientes;
  EXIT WHEN CRS%NOTFOUND;
    Dbms_Output.Put_Line(total_clientes || ' clientes possuem veiculos do modelo '||modelo || '- '||montadora);
  END LOOP;
  CLOSE CRS;
END;

--#EXECUTANDO A PROCEDURE :: total_clientes_modelos
EXECUTE total_clientes_modelos;

-- +----PROCEDURE: TRAZER OS ULTIMOS 5 REGISTROS DE NOVAS APOLICES---------+
CREATE OR REPLACE PROCEDURE ultimas_apolices AS
  CURSOR C1 IS
  SELECT TO_CHAR(A.DATACADASTRO,'DD/MM/YYYY') data,C.NOME nome,MODELO.NOME Modelo,Concat('R$ ',to_char(A.VALORAPOLICE, 'FM999G999G999D90')) Valor
  FROM JMM_APOLICE A
  INNER JOIN JMM_VEICULOS V    ON A.IDVEIC = V.IDVEIC
  INNER JOIN JMM_CLIENTES C    ON V.IDCLI = C.IDCLI
  INNER JOIN JMM_MODELO MODELO ON V.IDMOD = MODELO.IDMOD;
  REG C1%ROWTYPE;
BEGIN
  OPEN C1;
  LOOP
    FETCH C1 INTO REG;
    EXIT WHEN C1%ROWCOUNT = 5;
    Dbms_Output.Put_Line('Sr(a) ' || reg.nome || ', veiculo: '|| reg.modelo || ' na data de: '
    || reg.data || ' com valor de: ' || reg.valor);
  END LOOP;
  CLOSE C1;
END;

--#EXECUTANDO A PROCEDURE :: ultimas_apolices
EXECUTE ultimas_apolices;

-- +----FUNCTION: VERIFICA SE O ID DO CLIENTE EXISTE---------+
CREATE OR REPLACE FUNCTION Verifica_Placa
(pPlaca IN JMM_VEICULOS.PLACA%TYPE)
RETURN BOOLEAN
IS
  vPlaca  VARCHAR2(10);
BEGIN
  SELECT PLACA INTO vPlaca FROM JMM_VEICULOS WHERE PLACA = pPlaca;
  RETURN(TRUE);
EXCEPTION
  WHEN OTHERS THEN
  RETURN (FALSE);
END;



-- +----PACKAGE: CRUD---------+
CREATE OR REPLACE PACKAGE PKG_CRUD
IS

  PROCEDURE ADD_VEICULO
  (pPlaca        IN   JMM_VEICULOS.PLACA%TYPE,
  pAnoFabricacao IN   JMM_VEICULOS.ANOFABRICACAO%TYPE,
  pIDCLI         IN   JMM_VEICULOS.IDCLI%TYPE,
  pIDMOD         IN   JMM_VEICULOS.IDCLI%TYPE
  );

  PROCEDURE EDITAR_VEICULO
  (pID_VEICULO NUMBER,
  pPlaca VARCHAR2,
  pNovaPlaca VARCHAR2
  );

  PROCEDURE EXCLUIR_VEICULO
  (pIDVEIC NUMBER);

  PROCEDURE visualizar_geral
  (pCod_cliente NUMBER);

END; --FIM PKG_CRUD

CREATE OR REPLACE PACKAGE BODY PKG_CRUD
IS

--#### INSERIR VEICULO | REGRA: SE A PLACA NAO ESTIVER JA CADASTRADA
PROCEDURE ADD_VEICULO
(pPlaca         IN   JMM_VEICULOS.PLACA%TYPE,
 pAnoFabricacao IN   JMM_VEICULOS.ANOFABRICACAO%TYPE,
 pIDCLI         IN   JMM_VEICULOS.IDCLI%TYPE,
 pIDMOD         IN   JMM_VEICULOS.IDCLI%TYPE
)IS
BEGIN
  IF (NOT VERIFICA_PLACA(pPlaca)) THEN
    INSERT INTO JMM_VEICULOS VALUES(
    JMM_SEQ_VEICULOS.NEXTVAL,
    pPlaca,
    pAnoFabricacao,
    pIDCLI,
    pIDMOD);
  ELSE
  Dbms_Output.Put_Line('Já existe um veiculo cadastrado. Verifique a placa:'
  || pPlaca);
  END IF;
END; --FIM PROCEDURE




--#### ATUALIZAR VEICULO | REGRA: APENAS PODERÁ ALTERAR A PLACA DO VEICULO.
PROCEDURE EDITAR_VEICULO
(pID_VEICULO NUMBER,
 pPlaca VARCHAR2,
 pNovaPlaca VARCHAR2
)
IS
BEGIN
  IF(VERIFICA_PLACA(pPlaca)) THEN
    UPDATE JMM_VEICULOS SET PLACA = pNovaPlaca WHERE IDVEIC = pID_VEICULO;
  ELSE
    Dbms_Output.Put_Line('A placa: ' || pPlaca || ' Não existe!');
  END IF;
END; --FIM PROCEDURE



--#### EXCLUIR VEICULO  | REGRA: OBEDECER AS REGRAS DE FK.
PROCEDURE EXCLUIR_VEICULO(pIDVEIC NUMBER)
IS
  eID_inexistente EXCEPTION;
BEGIN
  DELETE FROM JMM_VEICULOS WHERE IDVEIC = pIDVEIC;

IF SQL%ROWCOUNT =0 THEN
  RAISE eID_inexistente;
END IF;

EXCEPTION
 WHEN eID_inexistente THEN
  Dbms_Output.Put_Line('O ID INSERIDO NÃO EXSITE.');
END;



--#### SELECIONAR CLIENTE (VISAO GERAL)
PROCEDURE visualizar_geral(pCod_cliente NUMBER)
AS
CURSOR CURS1 IS
  SELECT c.idcli cod,
       To_char(C.DATACADASTRO,'DD/MM/YYYY') data,
       C.NOME nome,
       Count(*) total
       FROM JMM_CLIENTES C
  INNER JOIN JMM_VEICULOS V ON C.IDCLI = V.IDCLI
  WHERE C.IDCLI = pCod_cliente
  GROUP  BY  c.idcli,
             C.DATACADASTRO,
             C.NOME;
RECORD CURS1%ROWTYPE;
BEGIN
  OPEN CURS1;
  LOOP
    FETCH CURS1 INTO RECORD;
    EXIT WHEN CURS1%NOTFOUND;
    Dbms_Output.Put_Line(RECORD.cod || ' - ' || RECORD.nome || ', cadastro realizado em: '||
                         RECORD.data || ' possui '|| RECORD.total ||' veiculo(s) cadastrado(s)');
  END LOOP;
  CLOSE CURS1;
END;

END; --FIM PKG BODY


-- +----EXECUTANDO OS PACKAGES---------+
EXECUTE PKG_CRUD.visualizar_geral(1);
EXECUTE PKG_CRUD.ADD_VEICULO('JSA-1222',1990,5,2);
EXECUTE PKG_CRUD.EDITAR_VEICULO(6,'JSA-1222','JJQ-1221');
EXECUTE PKG_CRUD.EXCLUIR_VEICULO(7);


-- +----TRIGGERS---------+

--####Não é possivel cadastrar na tabela JMM_VEICULOS fora do horario comercial.
CREATE OR REPLACE TRIGGER VALIDAR_HORARIO
BEFORE INSERT OR UPDATE OR DELETE ON JMM_VEICULOS
BEGIN
  IF(To_Char(SYSDATE,'D')) NOT IN (1,7) THEN
    IF(INSERTING) THEN
      Raise_Application_Error(-20999,'Voce so podera inserir em dias uteis');
    ELSIF(DELETING) THEN
      Raise_Application_Error(-20998,'Voce so pode deletar em dias uteis');
    ELSIF(UPDATING) THEN
      Raise_Application_Error(-20997,'Voce so pode alterar em dias uteis');
    END IF;
    END IF;
END;

ALTER TRIGGER VALIDAR_HORARIO DISABLE;

--####Antes de inserir algum registro, mostrará a contagem da tabela
CREATE OR REPLACE TRIGGER CONTAR_CLIENTES
AFTER INSERT ON JMM_CLIENTES
DECLARE
  total INTEGER;
BEGIN
  SELECT Count(IDCLI) INTO total FROM JMM_CLIENTES;
    Dbms_Output.Put_Line('NOVO CLIENTE ADICIONADO. Atualmente temos' || total || ' clientes cadastrados');
END;


--####Auditoria na tabela JMM_APOLICE
CREATE OR REPLACE TRIGGER AUDITORIA_APOLICE
AFTER INSERT OR DELETE OR UPDATE ON JMM_APOLICE
FOR EACH ROW --SERÁ EXECUTADA PARA CADA LINHA.
  BEGIN
    IF(DELETING) THEN
      INSERT INTO JMM_LOGS(IDLOG,OBSERVACAO) VALUES(JMM_SEQ_LOGS.NEXTVAL,'Linhas deletadas');
    ELSIF(UPDATING('VALORAPOLICE')) THEN
      INSERT INTO JMM_LOGS VALUES(JMM_SEQ_LOGS.NEXTVAL,:OLD.VALORAPOLICE,:NEW.VALORAPOLICE,'Alteracoes realizadas');
    END IF;
END;
